import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  StatusBar,
  ScrollView,
  TouchableOpacity,
  Alert,
} from 'react-native';
import { MainLayoutWithTabs, StatusBarComponent } from '../../components/common';

interface VisitRecord {
  id: string;
  restaurantName: string;
  category: string;
  visitDate: string;
  rating: number;
  review?: string;
  emoji: string;
  color: string;
}

interface ReviewRecord {
  id: string;
  restaurantName: string;
  rating: number;
  content: string;
  date: string;
  likes: number;
  emoji: string;
}

const visitRecords: VisitRecord[] = [
  {
    id: '1',
    restaurantName: 'Î™ÖÍ∞Ä ÌïúÏ†ïÏãù',
    category: 'ÌïúÏãù',
    visitDate: '2024.03.15',
    rating: 4.5,
    review: 'Ï†ïÎßê ÎßõÏûàÏóàÏñ¥Ïöî! Îã§ÏùåÏóê Îòê Ïò§Í≥† Ïã∂ÎÑ§Ïöî',
    emoji: 'üç±',
    color: '#ff6699',
  },
  {
    id: '2',
    restaurantName: 'Ïò§ÎØ∏ÎùºÎ©¥',
    category: 'ÏùºÏãù',
    visitDate: '2024.03.12',
    rating: 4.8,
    review: 'Íµ≠Î¨ºÏù¥ ÏßÑÌïòÍ≥† Î©¥Ïù¥ Ï´ÑÍπÉÌï¥Ïöî',
    emoji: 'üçú',
    color: '#9980cc',
  },
  {
    id: '3',
    restaurantName: 'ÎßõÏûàÎäî Î∂ÑÏãù',
    category: 'Î∂ÑÏãù',
    visitDate: '2024.03.10',
    rating: 4.2,
    emoji: 'ü•ü',
    color: '#ffcc99',
  },
];

const reviewRecords: ReviewRecord[] = [
  {
    id: '1',
    restaurantName: 'Î™ÖÍ∞Ä ÌïúÏ†ïÏãù',
    rating: 4.5,
    content: 'Í∞ÄÏ°±Í≥º Ìï®Íªò Îã§ÎÖÄÏôîÎäîÎç∞ Î™®Îì† Î∞òÏ∞¨Ïù¥ Ï†ïÍ∞àÌïòÍ≥† ÎßõÏûàÏóàÏäµÎãàÎã§. ÌäπÌûà ÎêúÏû•Ï∞åÍ∞úÍ∞Ä ÏùºÌíàÏù¥ÏóàÏñ¥Ïöî!',
    date: '2024.03.15',
    likes: 12,
    emoji: 'üç±',
  },
  {
    id: '2',
    restaurantName: 'Ïò§ÎØ∏ÎùºÎ©¥',
    rating: 4.8,
    content: 'ÏßÑÏßú ÎßõÏûàÎäî ÎùºÎ©òÏßë Î∞úÍ≤¨! Íµ≠Î¨ºÏù¥ ÏßÑÌïòÍ≥† Ï∞®ÏäàÎèÑ Î∂ÄÎìúÎü¨ÏõåÏöî. Ïû¨Î∞©Î¨∏ ÏùòÏÇ¨ 100%',
    date: '2024.03.12',
    likes: 8,
    emoji: 'üçú',
  },
];

export default function RecordsScreen() {
  const [selectedTab, setSelectedTab] = useState('Î∞©Î¨∏ Í∏∞Î°ù');

  const handleDeleteRecord = (id: string, type: 'visit' | 'review') => {
    Alert.alert(
      'ÏÇ≠Ï†ú ÌôïÏù∏',
      'Ïù¥ Í∏∞Î°ùÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        { 
          text: 'ÏÇ≠Ï†ú', 
          style: 'destructive', 
          onPress: () => console.log(`${type} Í∏∞Î°ù ${id} ÏÇ≠Ï†ú`) 
        },
      ]
    );
  };

  const handleEditRecord = (id: string, type: 'visit' | 'review') => {
    console.log(`${type} Í∏∞Î°ù ${id} ÏàòÏ†ï`);
  };

  const renderVisitRecords = () => (
    <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
      {visitRecords.map((record) => (
        <TouchableOpacity
          key={record.id}
          style={styles.recordItem}
          onPress={() => handleEditRecord(record.id, 'visit')}
        >
          <View style={[styles.recordImage, { backgroundColor: record.color }]}>
            <Text style={styles.recordEmoji}>{record.emoji}</Text>
          </View>
          <View style={styles.recordInfo}>
            <Text style={styles.recordTitle}>{record.restaurantName}</Text>
            <Text style={styles.recordCategory}>{record.category}</Text>
            <Text style={styles.recordDate}>{record.visitDate}</Text>
            <View style={styles.ratingContainer}>
              <Text style={styles.rating}>‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ {record.rating}</Text>
            </View>
            {record.review && (
              <Text style={styles.recordReview}>{record.review}</Text>
            )}
          </View>
          <TouchableOpacity
            style={styles.deleteButton}
            onPress={() => handleDeleteRecord(record.id, 'visit')}
          >
            <Text style={styles.deleteButtonText}>ÏÇ≠Ï†ú</Text>
          </TouchableOpacity>
        </TouchableOpacity>
      ))}
      {visitRecords.length === 0 && (
        <View style={styles.emptyContainer}>
          <Text style={styles.emptyText}>ÏïÑÏßÅ Î∞©Î¨∏Ìïú ÎßõÏßëÏù¥ ÏóÜÏñ¥Ïöî</Text>
          <Text style={styles.emptySubText}>ÎßõÏßëÏùÑ Î∞©Î¨∏ÌïòÍ≥† Í∏∞Î°ùÏùÑ ÎÇ®Í≤®Î≥¥ÏÑ∏Ïöî!</Text>
        </View>
      )}
    </ScrollView>
  );

  const renderReviewRecords = () => (
    <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
      {reviewRecords.map((review) => (
        <TouchableOpacity
          key={review.id}
          style={styles.reviewItem}
          onPress={() => handleEditRecord(review.id, 'review')}
        >
          <View style={styles.reviewHeader}>
            <Text style={styles.reviewEmoji}>{review.emoji}</Text>
            <View style={styles.reviewInfo}>
              <Text style={styles.reviewTitle}>{review.restaurantName}</Text>
              <View style={styles.reviewRatingContainer}>
                <Text style={styles.reviewRating}>‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ {review.rating}</Text>
                <Text style={styles.reviewDate}>{review.date}</Text>
              </View>
            </View>
            <TouchableOpacity
              style={styles.deleteButton}
              onPress={() => handleDeleteRecord(review.id, 'review')}
            >
              <Text style={styles.deleteButtonText}>ÏÇ≠Ï†ú</Text>
            </TouchableOpacity>
          </View>
          <Text style={styles.reviewContent}>{review.content}</Text>
          <View style={styles.reviewFooter}>
            <Text style={styles.reviewLikes}>‚ù§Ô∏è {review.likes}</Text>
          </View>
        </TouchableOpacity>
      ))}
      {reviewRecords.length === 0 && (
        <View style={styles.emptyContainer}>
          <Text style={styles.emptyText}>ÏûëÏÑ±Ìïú Î¶¨Î∑∞Í∞Ä ÏóÜÏñ¥Ïöî</Text>
          <Text style={styles.emptySubText}>ÎßõÏßë Î¶¨Î∑∞Î•º ÏûëÏÑ±Ìï¥Î≥¥ÏÑ∏Ïöî!</Text>
        </View>
      )}
    </ScrollView>
  );

  return (
    <MainLayoutWithTabs>
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="dark-content" backgroundColor="#ffffff" />
        
        <StatusBarComponent />

        {/* Ìó§Îçî */}
        <View style={styles.header}>
          <Text style={styles.headerTitle}>Í∏∞Î°ù</Text>
          <View style={styles.statsContainer}>
            <Text style={styles.statsText}>Î∞©Î¨∏ {visitRecords.length}Í≥≥</Text>
            <Text style={styles.statsSeparator}>‚Ä¢</Text>
            <Text style={styles.statsText}>Î¶¨Î∑∞ {reviewRecords.length}Í∞ú</Text>
          </View>
        </View>

        {/* ÌÉ≠ */}
        <View style={styles.tabContainer}>
          <TouchableOpacity
            style={[
              styles.tab,
              selectedTab === 'Î∞©Î¨∏ Í∏∞Î°ù' && styles.activeTab,
            ]}
            onPress={() => setSelectedTab('Î∞©Î¨∏ Í∏∞Î°ù')}
          >
            <Text
              style={[
                styles.tabText,
                selectedTab === 'Î∞©Î¨∏ Í∏∞Î°ù' && styles.activeTabText,
              ]}
            >
              Î∞©Î¨∏ Í∏∞Î°ù
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[
              styles.tab,
              selectedTab === 'ÎÇ¥ Î¶¨Î∑∞' && styles.activeTab,
            ]}
            onPress={() => setSelectedTab('ÎÇ¥ Î¶¨Î∑∞')}
          >
            <Text
              style={[
                styles.tabText,
                selectedTab === 'ÎÇ¥ Î¶¨Î∑∞' && styles.activeTabText,
              ]}
            >
              ÎÇ¥ Î¶¨Î∑∞
            </Text>
          </TouchableOpacity>
        </View>

        {/* ÏΩòÌÖêÏ∏† */}
        {selectedTab === 'Î∞©Î¨∏ Í∏∞Î°ù' ? renderVisitRecords() : renderReviewRecords()}
      </SafeAreaView>
    </MainLayoutWithTabs>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#f2f2f2',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#333333',
  },
  statsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  statsText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#33b2e5',
  },
  statsSeparator: {
    fontSize: 14,
    fontWeight: '500',
    color: '#999999',
    marginHorizontal: 6,
  },
  tabContainer: {
    flexDirection: 'row',
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#f2f2f2',
  },
  tab: {
    flex: 1,
    paddingVertical: 15,
    alignItems: 'center',
  },
  activeTab: {
    borderBottomWidth: 2,
    borderBottomColor: '#33b2e5',
  },
  tabText: {
    fontSize: 16,
    fontWeight: '500',
    color: '#999999',
  },
  activeTabText: {
    fontWeight: '700',
    color: '#33b2e5',
  },
  scrollView: {
    flex: 1,
  },
  recordItem: {
    flexDirection: 'row',
    backgroundColor: '#ffffff',
    paddingHorizontal: 20,
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(242, 242, 242, 0.5)',
  },
  recordImage: {
    width: 50,
    height: 50,
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 15,
  },
  recordEmoji: {
    fontSize: 24,
  },
  recordInfo: {
    flex: 1,
  },
  recordTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 4,
  },
  recordCategory: {
    fontSize: 12,
    fontWeight: '500',
    color: '#999999',
    marginBottom: 2,
  },
  recordDate: {
    fontSize: 12,
    fontWeight: '400',
    color: '#999999',
    marginBottom: 4,
  },
  ratingContainer: {
    marginBottom: 4,
  },
  rating: {
    fontSize: 12,
    fontWeight: '600',
    color: '#ffb21a',
  },
  recordReview: {
    fontSize: 14,
    fontWeight: '400',
    color: '#666666',
    lineHeight: 18,
  },
  deleteButton: {
    paddingHorizontal: 10,
    paddingVertical: 5,
  },
  deleteButtonText: {
    fontSize: 12,
    fontWeight: '500',
    color: '#ff334d',
  },
  reviewItem: {
    backgroundColor: '#ffffff',
    paddingHorizontal: 20,
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(242, 242, 242, 0.5)',
  },
  reviewHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  reviewEmoji: {
    fontSize: 24,
    marginRight: 10,
  },
  reviewInfo: {
    flex: 1,
  },
  reviewTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 4,
  },
  reviewRatingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  reviewRating: {
    fontSize: 12,
    fontWeight: '600',
    color: '#ffb21a',
    marginRight: 8,
  },
  reviewDate: {
    fontSize: 12,
    fontWeight: '400',
    color: '#999999',
  },
  reviewContent: {
    fontSize: 14,
    fontWeight: '400',
    color: '#333333',
    lineHeight: 20,
    marginBottom: 10,
  },
  reviewFooter: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  reviewLikes: {
    fontSize: 12,
    fontWeight: '500',
    color: '#ff334d',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 80,
  },
  emptyText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#999999',
    marginBottom: 8,
  },
  emptySubText: {
    fontSize: 14,
    fontWeight: '400',
    color: '#cccccc',
  },
});